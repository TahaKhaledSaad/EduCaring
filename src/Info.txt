Speakers Profiles:
  - kiyoxi7092@azduan.com
  - bvk78432@vogco.com
  - czpwcfnnyokzuxxbec@cwmxc.com -> Taha Kh. Saad

Users Profiles:
  - fasedo1128@dovesilo.com
  - maxoleg775@cmheia.com
  - mogojo1581@cmheia.com --> buy current event
  - bevot55705@azduan.com
  - fikoni2089@fryshare.com

Links:
  - Figma: https://www.figma.com/file/FCCcJ8DKgj9dg2TkmZncOm/edu_caring?type=design&node-id=675-3254&mode=design&t=6EmmilG9oHax6uSU-0
  - Postman: https://blue-star-85086.postman.co/workspace/Edu-Caring~e2c6b8b9-fdab-415b-8811-6cac8cab5548/collection/32462343-9aec5e81-499d-49d6-828a-2d25f6cdf4d6
  - Dashboard: http://hossamelhadad-001-site14.ktempurl.com/#/dashboard/users




================================================================
TODO ========================== Login ==========================
================================================================



import logo from "./../../../assets/logo-removebg-preview.png";
import loginImage from "./../../../assets/login-image.jpg";
import style from "./Login.module.css";
import { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import Cookie from "cookie-universal";
import axios from "axios";
import { BASE } from "../../../Api";
import Role from "../Popups/Role";
import VerifyInputs from "../verfiy-number/VerifyInputs";
import "./../verfiy-number/Verfication.module.css";

export default function Login() {
  const nav = useNavigate();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const cookies = Cookie();

  const [errorMessage, setErrorMessage] = useState("");

  const togglePasswordVisibility = () => {
    setShowPassword((prevShowPassword) => !prevShowPassword);
  };

  async function handleFormSubmit(e) {
    e.preventDefault();
    try {
      const res = await axios.post(`${BASE}/Auth/Login`, {
        email: email,
        password: password,
      });

      res.data.isSuccess ? setErrorMessage("") : setErrorMessage(res.data.responseText);
      console.log(errorMessage);

      // Set Token
      res.data.responseObject.isVerified &&
        cookies.set("edu-caring", res.data.responseObject.token);

      // Set Navigation
      cookies.get("edu-caring") !== "" && res.data.responseObject.isVerified
        ? nav("/home")
        : nav("/verification");
    } catch (error) {
      console.log(error);
    }
  }

  let [role, setRole] = useState(false);

  function handleRoleFromChild(role) {
    setRole(role);
  }

  const show = false;
  const [otp, setOtp] = useState("");

  // Handler function for OTP input
  const handleOnChange = (e) => {
    const maxLength = 1;
    const value = e.target.value;

    if (value.length === maxLength) {
      const nextInput = e.target.nextElementSibling;
      if (nextInput) {
        nextInput.focus();
      }
      setOtp((prevOtp) => prevOtp + value);
    } else if (value.length === 0) {
      const previousInput = e.target.previousElementSibling;
      if (previousInput) {
        previousInput.focus();
      }
      setOtp((prevOtp) => prevOtp.slice(0, -1));
    }
  };

  return (
    <>
      <div className={style.container}>
        <div>
          <form className={style.form} onSubmit={handleFormSubmit}>
            <img src={logo} alt="logo" />

            {/* Main Info */}
            {show && (
              <div>
                <h2 className="fw-bold">Sign in</h2>
                {/* Input */}
                <div>
                  <i className="fa-regular fa-envelope"></i>
                  <input
                    type="email"
                    placeholder="email"
                    onChange={(e) => setEmail(e.target.value)}
                  />
                </div>

                {/* Password */}
                <div className={style.input} style={{ marginBottom: "0px" }}>
                  <i className="fa-solid fa-lock"></i>
                  <input
                    type={showPassword ? "text" : "password"}
                    placeholder="password"
                    onChange={(e) => setPassword(e.target.value)}
                  />
                  <i
                    className={`fa-regular ${
                      showPassword ? "fa-eye" : "fa-eye-slash"
                    } fa-flip-horizontal`}
                    onClick={togglePasswordVisibility}
                  ></i>
                </div>

                <div
                  className="text-muted my-1"
                  style={{
                    textDecoration: "underline",
                    textAlign: "right",
                    border: "none",
                    cursor: "pointer",
                    fontSize: "12px",
                    fontWeight: "500",
                  }}
                >
                  forget password!
                </div>

                {errorMessage !== "" && <p className="text-danger py-2">{errorMessage}</p>}

                <button>Sign In</button>
                <p className="m-0 p-0 my-3 fs-6">
                  I have an Account? &nbsp;
                  <Link onClick={() => setRole(!role)} className="fw-bold">
                    Sign Up
                  </Link>
                </p>
              </div>
            )}
          </form>

          {/* Forget Password */}
          {!show && (
            <>
              <h2 className="fw-bold">Verfication</h2>
              <VerifyInputs email={email} />
            </>
          )}

          {/* Verification Done: Reset Password */}
          {!show && (
            <div style={{ border: "none" }}>
              <h2 className="fw-bold">Reset Password</h2>
              {/* Password */}
              <div className={style.input}>
                <i className="fa-solid fa-lock"></i>
                <input
                  type={showPassword ? "text" : "password"}
                  placeholder="password"
                  onChange={(e) => setPassword(e.target.value)}
                />
                <i
                  className={`fa-regular ${
                    showPassword ? "fa-eye" : "fa-eye-slash"
                  } fa-flip-horizontal`}
                  onClick={togglePasswordVisibility}
                ></i>
              </div>

              {/* Password */}
              <div className={style.input}>
                <i className="fa-solid fa-lock"></i>
                <input
                  type={showPassword ? "text" : "password"}
                  placeholder="password"
                  onChange={(e) => setPassword(e.target.value)}
                />
                <i
                  className={`fa-regular ${
                    showPassword ? "fa-eye" : "fa-eye-slash"
                  } fa-flip-horizontal`}
                  onClick={togglePasswordVisibility}
                ></i>
              </div>
            </div>
          )}
        </div>
        <div className={style.image}>
          <img src={loginImage} alt="loginImage" style={{ objectFit: "cover" }} />
        </div>

        {/* Role */}
        <div
          style={{
            width: "100vw",
            height: "100vh",
            position: "fixed",
            top: 0,
            left: 0,
            backgroundColor: "rgba(0, 0, 0, 0.5)",
            display: role ? "flex" : "none",
            justifyContent: "center",
            alignItems: "center",
            zIndex: 100,
          }}
        >
          {role && <Role roleCase={handleRoleFromChild}></Role>}
        </div>
      </div>
    </>
  );
}
//


